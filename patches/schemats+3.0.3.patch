diff --git a/node_modules/schemats/src/schemaPostgres.js b/node_modules/schemats/src/schemaPostgres.js
index aa993b0..3075489 100644
--- a/node_modules/schemats/src/schemaPostgres.js
+++ b/node_modules/schemats/src/schemaPostgres.js
@@ -76,7 +76,7 @@ var PostgresDatabase = /** @class */ (function () {
                     return column;
                 case 'json':
                 case 'jsonb':
-                    column.tsType = 'Object';
+                    column.tsType = 'unknown';
                     return column;
                 case 'date':
                 case 'timestamp':
@@ -114,11 +114,16 @@ var PostgresDatabase = /** @class */ (function () {
                         column.tsType = options.transformTypeName(column.udtName);
                         return column;
                     }
-                    else {
-                        console.log("Type [" + column.udtName + " has been mapped to [any] because no specific type has been found.");
-                        column.tsType = 'any';
-                        return column;
+                    
+                    if (column.udtName.startsWith('_') && customTypes.indexOf(column.udtName.substr(1)) !== -1) {
+                        column.tsType = `Array<${options.transformTypeName(column.udtName.substr(1))}>`
+                        return column
                     }
+
+                    console.log("Type [" + column.udtName + " has been mapped to [any] because no specific type has been found.");
+                    column.tsType = 'any';
+                    return column;
+                    
             }
         });
     };
diff --git a/node_modules/schemats/src/typescript.js b/node_modules/schemats/src/typescript.js
index 8c734b7..cb6ca0f 100644
--- a/node_modules/schemats/src/typescript.js
+++ b/node_modules/schemats/src/typescript.js
@@ -20,11 +20,15 @@ function normalizeName(name, options) {
         return name;
     }
 }
+function capitalize (s) {
+    return s.charAt(0).toUpperCase() + s.slice(1)
+}
+
 function generateTableInterface(tableNameRaw, tableDefinition, options) {
     var tableName = options.transformTypeName(tableNameRaw);
     var members = '';
     Object.keys(tableDefinition).map(function (c) { return options.transformColumnName(c); }).forEach(function (columnName) {
-        members += columnName + ": " + tableName + "Fields." + normalizeName(columnName, options) + ";\n";
+        members += columnName + ": " + tableName + "Fields[\"" + normalizeName(columnName, options) + "\"];\n";
     });
     return "\n        export interface " + normalizeName(tableName, options) + " {\n        " + members + "\n        }\n    ";
 }
@@ -33,9 +37,9 @@ function generateEnumType(enumObject, options) {
     var enumString = '';
     for (var enumNameRaw in enumObject) {
         var enumName = options.transformTypeName(enumNameRaw);
-        enumString += "export type " + enumName + " = ";
-        enumString += enumObject[enumNameRaw].map(function (v) { return "'" + v + "'"; }).join(' | ');
-        enumString += ';\n';
+        enumString += "export enum " + enumName + " {";
+        enumString += enumObject[enumNameRaw].map(function (v) { return `${capitalize(v)} = '${v}'`; }).join(',\n');
+        enumString += '};\n';
     }
     return enumString;
 }
@@ -45,11 +49,11 @@ function generateTableTypes(tableNameRaw, tableDefinition, options) {
     var fields = '';
     Object.keys(tableDefinition).forEach(function (columnNameRaw) {
         var type = tableDefinition[columnNameRaw].tsType;
-        var nullable = tableDefinition[columnNameRaw].nullable ? '| null' : '';
+        var nullable = tableDefinition[columnNameRaw].nullable ? ' | null' : '';
         var columnName = options.transformColumnName(columnNameRaw);
-        fields += "export type " + normalizeName(columnName, options) + " = " + type + nullable + ";\n";
+        fields += normalizeName(columnName, options) + " : " + type + nullable + ";\n";
     });
-    return "\n        export namespace " + tableName + "Fields {\n        " + fields + "\n        }\n    ";
+    return "\n        export interface " + tableName + "Fields {\n        " + fields + "\n        }\n    ";
 }
 exports.generateTableTypes = generateTableTypes;
 //# sourceMappingURL=typescript.js.map
\ No newline at end of file
